

//ğŸ‘‰ Funkcje strzaÅ‚kowe (ES6+)
// RÃ³Å¼nice w stosunku do C# lambd:
//  - krÃ³tsza skÅ‚adnia
//  - UWAGA: arrow functions nie majÄ… wÅ‚asnego "this" (dziedziczÄ… z otoczenia)
const divide = (x, y) => x / y;
console.log(divide(10, 2));

const square = x => x * x;
console.log(square(6));

const userThis = {
  name: "Ala",
  showName: () => {
    console.log(this.name);
  }
};

userThis.showName(); // ğŸ‘‰ undefined, bo arrow function nie ma swojego `this`!


class Person {
  constructor(name) {
    this.name = name;
  }

  normalFunc() {
    setTimeout(function () {
      console.log("normalFunc:", this.name);
    }, 100);
  }

  arrowFunc() {
    setTimeout(() => {
      console.log("arrowFunc:", this.name);
    }, 100);
  }
}

const p = new Person("Jan");
p.normalFunc(); // ğŸ‘‰ normalFunc: undefined
p.arrowFunc();  // ğŸ‘‰ arrowFunc: Jan

//ğŸ‘‰ GdybyÅ›my uÅ¼yli normalnej funkcji w setInterval,
// This wskazywaÅ‚oby na window (w przeglÄ…darce) zamiast na instancjÄ™ Timer. 
// DziÄ™ki arrow function this wskazuje na obiekt Timer. PoniewaÅ¼ dziedziczy this
// z miejsce w ktÃ³rym zostaÅ‚Ä… zdefiniowana


// âœ… Uwagi:
// KaÅ¼da funkcja w JS ma wÅ‚asny kontekst (this).
// Funkcja strzaÅ‚kowa nie ma wÅ‚asnego this. Zamiast tego dziedziczy this z miejsca, w ktÃ³rym zostaÅ‚a zdefiniowana (lexical this).