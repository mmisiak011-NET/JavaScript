

//ğŸ”¹ funkcja konstruktor

/*
    ğŸ”¹STARE PODEJSCIE PRZED ES6 teraz korzysta sie z klas
    ğŸ”¹To zwykÅ‚a funkcja, ale uÅ¼ywana razem z new do tworzenia obiektÃ³w.
    ğŸ”¹Konwencja: nazwa zaczyna siÄ™ wielkÄ… literÄ….


*/

function Person(name, age) {
  this.name = name;   // `this` = nowy obiekt
  this.age = age;

  this.sayHello = function() {
    console.log(`Hi, I'm ${this.name}, ${this.age} years old`);
  };
}

const p1 = new Person("Alice", 25);
p1.sayHello(); // Hi, I'm Alice, 25 years old


function Person2(name, age) {
  this.name = name;
  this.age = age;
}

Person2.prototype.sayHello = function() {
  console.log(`Hi, I'm ${this.name}, ${this.age} years old`);
};

const p2 = new Person2("Bob", 30);
const p3 = new Person2("Charlie", 40);

p2.sayHello(); // Hi, I'm Bob, 30 years old
p3.sayHello(); // Hi, I'm Charlie, 40 years old

//ğŸ‘‰ Teraz wszystkie obiekty Person korzystajÄ… z tej samej funkcji sayHello w prototypie, zamiast kopiowaÄ‡ jÄ… do kaÅ¼dej instancji.

/*

ğŸ“Œ Jak to dziaÅ‚a krok po kroku:
ğŸ”¹ Gdy wywoÅ‚ujemy new Person(...), JS robi nowy pusty obiekt {}.
ğŸ”¹ Ustawia this wewnÄ…trz funkcji na ten nowy obiekt.
ğŸ”¹ JeÅ›li funkcja nic nie zwrÃ³ci, domyÅ›lnie zwracany jest ten nowy obiekt.


ğŸ”¹ JeÅ›li zdefiniujemy metodÄ™ w Å›rodku konstruktora, 
    kaÅ¼da instancja dostaje kopiÄ™ tej metody (nieoptymalne).
ğŸ”¹ Lepsza praktyka â€“ uÅ¼ywaÄ‡ prototype:
*/