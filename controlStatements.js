
// =============================
// Funkcje
// =============================

//ðŸ‘‰ Deklaracja funkcji
function greet(name) {
    console.log(this);
    console.log(`CzeÅ›Ä‡, ${name}!`);
}

greet("Jan");

const personThis = {
  name: "Jan",
  greet: function() {
    console.log(`CzeÅ›Ä‡, ${this.name}!`); // funkcja ta ma wÅ‚asny kontekst this
  }
};

personThis.greet(); // "CzeÅ›Ä‡, Jan!"

//ðŸ‘‰ Funkcja zwracajÄ…ca wartoÅ›Ä‡
function add(a, b) {
  return a + b;
}

let sum = add(5, 3);
console.log(sum);

//ðŸ‘‰ Funkcja anonimowa przypisana do zmiennej
const multiply = function (x, y) {
  return x * y;
};

console.log(multiply(4, 2));

//ðŸ‘‰ Funkcje strzaÅ‚kowe (ES6+)
// RÃ³Å¼nice w stosunku do C# lambd:
//  - krÃ³tsza skÅ‚adnia
//  - UWAGA: arrow functions nie majÄ… wÅ‚asnego "this" (dziedziczÄ… z otoczenia)
const divide = (x, y) => x / y;
console.log(divide(10, 2));

const square = x => x * x;
console.log(square(6));

const userThis = {
  name: "Ala",
  showName: () => {
    console.log(this.name);
  }
};

userThis.showName(); // ðŸ‘‰ undefined, bo arrow function nie ma swojego `this`!


class Person {
  constructor(name) {
    this.name = name;
  }

  normalFunc() {
    setTimeout(function () {
      console.log("normalFunc:", this.name);
    }, 100);
  }

  arrowFunc() {
    setTimeout(() => {
      console.log("arrowFunc:", this.name);
    }, 100);
  }
}

const p = new Person("Jan");
p.normalFunc(); // ðŸ‘‰ normalFunc: undefined
p.arrowFunc();  // ðŸ‘‰ arrowFunc: Jan

//ðŸ‘‰ GdybyÅ›my uÅ¼yli normalnej funkcji w setInterval,
// This wskazywaÅ‚oby na window (w przeglÄ…darce) zamiast na instancjÄ™ Timer. 
// DziÄ™ki arrow function this wskazuje na obiekt Timer. PoniewaÅ¼ dziedziczy this
// z miejsce w ktÃ³rym zostaÅ‚Ä… zdefiniowana

// âœ… Uwagi:
// KaÅ¼da funkcja w JS ma wÅ‚asny kontekst (this).
// Funkcja strzaÅ‚kowa nie ma wÅ‚asnego this. Zamiast tego dziedziczy this z miejsca, w ktÃ³rym zostaÅ‚a zdefiniowana (lexical this).






// =============================
// Instrukcje warunkowe w JS
// =============================

//ðŸ‘‰ if
// W JS dziaÅ‚a podobnie jak w C#. Sprawdza warunek logiczny.
// RÃ³Å¼nica: w JS dowolna wartoÅ›Ä‡ moÅ¼e byÄ‡ traktowana jako true/false.
//  - "falsy" wartoÅ›ci to: false, 0, NaN, "", null, undefined
//  - wszystko inne jest "truthy" (np. "0" jako string => true)

if (true) {
  console.log("Zawsze siÄ™ wykona");
}

if (0) {
  console.log("To siÄ™ nie wykona, bo 0 = falsy");
}

let age = 17;

if (age == 18) {
  console.log("age == 18");
} else if (age < 18) {
  console.log("age < 18");
} else if (age > 18 && age < 25) {
  console.log("age > 18 && age < 25");
} else {
  console.log("age >= 25");
}

//ðŸ‘‰ RÃ³Å¼nice C# vs JS:
// - W C# typy sÄ… Å›ciÅ›lejsze (int, bool itd.), w JS wszystko jest "dynamiczne".
// - Operator == w JS robi konwersjÄ™ typÃ³w (np. "5" == 5 -> true).
//   Lepiej uÅ¼ywaÄ‡ === (Å›cisÅ‚e porÃ³wnanie, jak w C#).

// =============================
// switch
// =============================

//ðŸ‘‰ switch w JS dziaÅ‚a podobnie do C#,
//    ale w JS porÃ³wnuje przez === (Å›cisÅ‚a rÃ³wnoÅ›Ä‡, bez konwersji typÃ³w).

let num = 22;

switch (num) {
  case 5:
    console.log("num: 5");
    break;
  case 12:
    console.log("num: 12");
    break;
  case 22:
    console.log(`num: ${num}`);
    break;
  default:
    console.log("Å»aden przypadek nie pasuje");
}

//ðŸ‘‰ kilka case moÅ¼e prowadziÄ‡ do jednego wyniku:
let n = 7;
switch (n) {
  case 5:
  case 6:
  case 7:
    console.log("n to 5, 6 lub 7");
    break;
}

//ðŸ‘‰ W C# mamy pattern matching i when:
//   case Person p when p.Age > 18:
// W JS tego nie ma, ale moÅ¼na uÅ¼yÄ‡ triku:

const person = { name: "Jan", age: 20 };

switch (true) {
  case person.age > 18:
    console.log("DorosÅ‚y");
    break;
  case person.age > 12:
    console.log("Nastolatek");
    break;
  default:
    console.log("Dziecko");
}


// =============================
// PÄ™tle
// =============================

//ðŸ‘‰ for (klasyczny)
for (let i = 0; i < 5; i++) {
  console.log("i =", i);
}

let numbers = [10, 20, 30];
for (let i = 0; i < numbers.length; i++) {
  console.log(`Element ${i}: ${numbers[i]}`);
}

for (let i = 0, j = 10; i < j; i++, j--) { // For z operatorem ","
  console.log(`i = ${i}, j = ${j}`);
}

//ðŸ‘‰ for...of â€“ iteracja po wartoÅ›ciach tablicy
for (let num of numbers) {
  console.log("num =", num);
}

//ðŸ”¹ RÃ³Å¼nice JS vs C#
//W C# teÅ¼ moÅ¼na uÅ¼ywaÄ‡ przecinka w for, ale tylko w sekcji inicjalizacji i kroku.
//W JS dokÅ‚adnie tak samo ale przecinek to peÅ‚noprawny operator i moÅ¼esz go uÅ¼ywaÄ‡ teÅ¼ poza pÄ™tlami:

//ðŸ‘‰ for...in â€“ iteracja po kluczach obiektu
// user[age] pobiera wartosÄ‡ z wÅ‚aÅ›ciwosci tak samo jak w tablicy
// ten sam efekt otrzymamy korzystajac z notacji z kropkÄ… user.age
const user = { name: "Ala", age: 25, city: "KrakÃ³w" };
for (let key in user) {
  console.log(`ForIn: ${key}: ${user[key]}`);
}


//ðŸ‘‰ while, moÅ¼e nie wykonac sieani razu jezeli pierwsz ywarunek nei zostanie speÅ‚niony
let x = 0;
while (x < 3) {
  console.log("x =", x);
  x++;
}

//ðŸ‘‰ do...while â€“ wykona siÄ™ min. 1 raz
let y = 0;
do {
  console.log("y =", y);
  y++;
} while (y < 3);

//ðŸ‘‰ break i continue
for (let i = 0; i < 10; i++) {
  if (i === 5) break;     // koÅ„czy pÄ™tlÄ™
  if (i % 2 === 0) continue; // pomija parzyste
  console.log("i =", i);
}

// =============================
// Metody tablicowe (czÄ™sto zamiast pÄ™tli)
// =============================

//ðŸ‘‰ forEach â€“ iteracja po elementach
numbers.forEach((num, index) => {
  console.log(`Index ${index}, wartoÅ›Ä‡ ${num}`);
});

//ðŸ‘‰ map â€“ zwraca nowÄ… tablicÄ™
let doubled = numbers.map(n => n * 2);
console.log(doubled);

//ðŸ‘‰ filter â€“ wybiera elementy speÅ‚niajÄ…ce warunek
let big = numbers.filter(n => n > 15);
console.log(big);

//ðŸ‘‰ reduce â€“ sprowadza tablicÄ™ do jednej wartoÅ›ci
let total = numbers.reduce((acc, val) => acc + val, 0);
console.log(total);

//ðŸ‘‰ RÃ³Å¼nice C# vs JS:
// - W C# mamy LINQ (Select, Where, Aggregate), ktÃ³re dziaÅ‚ajÄ… podobnie do map, filter, reduce.
// - W JS te metody sÄ… natywnÄ… czÄ™Å›ciÄ… obiektÃ³w tablicowych.



