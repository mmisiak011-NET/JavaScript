
// ==============================
// üìå Spread operator ...
// ==============================
/*
    ‚úÖ Operator spread (...) w JavaScript pozwala ‚Äûrozpakowywaƒá‚Äù 
    elementy tablic, obiekt√≥w lub iterowalnych struktur.


    ‚úÖ Operator spread (...) w przypadku obiekt√≥w dzia≈Ça tylko p≈Çytko (shallow copy).
    To znaczy: kopiuje tylko pierwszy poziom w≈Ça≈õciwo≈õci.
    e≈õli obiekt ma zagnie≈ºd≈ºone obiekty albo tablice, to kopiowane sƒÖ referencje, 
    a nie nowe kopie.
*/


// ==========================
// 1. Kopiowanie tablicy
// ==========================
const arr = [1, 2, 3];
const copy = [...arr];
console.log("Kopiowanie tablicy:", copy); // [1, 2, 3]

// ==========================
// 2. ≈ÅƒÖczenie tablic
// ==========================
const a = [1, 2];
const b = [3, 4];
const merged = [...a, ...b];
console.log("≈ÅƒÖczenie tablic:", merged); // [1, 2, 3, 4]

// ==========================
// 3. Dodawanie element√≥w
// ==========================
const arr2 = [2, 3, 4];
const newArr = [1, ...arr2, 5];
console.log("Dodawanie element√≥w:", newArr); // [1, 2, 3, 4, 5]

// ==========================
// 4. Spread w obiektach
// ==========================
const user = { name: "Alice", age: 25 };
const updatedUser = { ...user, age: 26, city: "Paris" };
console.log("Spread w obiektach:", updatedUser);
// age zostanie napisane a city zostanie dodane do obiektu

// ==========================
// 5. Kopiowanie obiektu
// ==========================
const original = { a: 1, b: 2 };
const copyObj = { ...original };
console.log("Kopiowanie obiektu:", copyObj);

// ==========================
// 6. Przekazywanie argument√≥w do funkcji
// ==========================
function sum(a, b, c) {
  return a + b + c;
}
const nums = [1, 2, 3];
console.log("Przekazywanie do funkcji:", sum(...nums)); // 6


// ==========================
// 7. Zamiana stringa w tablicƒô
// ==========================
const str = "hello";
const letters = [...str];
console.log("String na tablicƒô:", letters); // ['h','e','l','l','o']




// ==============================
// üìå Rest operator ...
// ==============================

/*
    Operator Rest (...) w JavaScript pozwala
    Zamieniƒá elementy w tablicƒô
*/

function logAll(first, ...rest) {
  console.log("Pierwszy argument:", first);
  console.log("Reszta (rest):", rest);
}
logAll(1, 2, 3, 4);

// Pierwszy argument: 1
// Reszta (rest): [2, 3, 4]

// ==========================
// Podsumowanie
// ==========================
// Spread: "rozpakowuje" elementy (tablicy, obiektu, stringa)
// Rest:   "zbiera" elementy w tablicƒô


// ==============================
// üìå Operacje na tablicach
// ==============================

console.log("=== Dodawanie element√≥w ===");

let arr1 = [1, 2, 3];

// push ‚Äì dodaje na koniec
arr1.push(4);
arr1.
console.log("push:", arr1); // [1, 2, 3, 4]

// unshift ‚Äì dodaje na poczƒÖtek
arr1.unshift(0);
console.log("unshift:", arr1); // [0, 1, 2, 3, 4]

// splice ‚Äì dodaje w dowolne miejsce
arr1.splice(2, 0, 99); // wstaw 99 na index 2
console.log("splice (dodanie):", arr1); // [0, 1, 99, 2, 3, 4]


// concat ‚Äì ≈ÇƒÖczenie tablic
const arr3 = arr1.concat([200, 300]);
console.log("concat:", arr3); // [0, 1, 99, 2, 3, 4, 200, 300]


console.log("\n=== Usuwanie element√≥w ===");

let arr4 = [10, 20, 30, 40, 50];

// pop ‚Äì usuwa ostatni element
arr4.pop();
console.log("pop:", arr4); // [10, 20, 30, 40]

// shift ‚Äì usuwa pierwszy element
arr4.shift();
console.log("shift:", arr4); // [20, 30, 40]

// splice ‚Äì usuwa elementy w ≈õrodku
arr4.splice(1, 1); // usu≈Ñ 1 element na pozycji 1
console.log("splice (usuwanie):", arr4); // [20, 40]

// filter ‚Äì tworzy nowƒÖ tablicƒô bez wybranych element√≥w
const arr5 = [1, 2, 3, 4, 5];
const filtered = arr5.filter(x => x !== 3);
console.log("filter:", filtered); // [1, 2, 4, 5]


console.log("\n=== Modyfikacja element√≥w ===");

let arr6 = [5, 10, 15, 20];

// bezpo≈õrednia modyfikacja przez indeks
arr6[1] = 99;
console.log("bezpo≈õrednio:", arr6); // [5, 99, 15, 20]

// map ‚Äì tworzy nowƒÖ tablicƒô z przekszta≈Çconymi elementami
const doubled = arr6.map(x => x * 2);
console.log("map (x2):", doubled); // [10, 198, 30, 40]

// splice ‚Äì zastƒÖpienie element√≥w
arr6.splice(2, 1, 123); // na index 2 usu≈Ñ 1 element i wstaw 123
console.log("splice (modyfikacja):", arr6); // [5, 99, 123, 20]

// forEach ‚Äì iteracja i zmiana element√≥w w miejscu
arr6.forEach((val, idx, array) => {
  array[idx] = val + 1; // inkrementacja ka≈ºdego elementu
});
console.log("forEach (inkrementacja):", arr6); // [6, 100, 124, 21]

